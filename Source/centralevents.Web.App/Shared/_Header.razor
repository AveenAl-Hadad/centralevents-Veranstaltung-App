@using CentralEvents.Web.App.Wrappers
@using Microsoft.AspNetCore.Cryptography.KeyDerivation
@using Blazored.LocalStorage
@using CentralEvent.Business.Contracts.Models
@inherits LayoutComponentBase
@inject IHttpClient Client
@inject ILocalStorageService LocalStorage

<header class="head">
    <a href="/">
        <img src="css/Images/ce_logo.png"/>
    </a>
    <br/>
    <table id="login">
        <tr>
            <td>
                <input @bind="Benutzername" type="text" placeholder="Benutzername" required/> @*Benutzername einbinden*@
            </td>
        </tr>
        <tr>
            <td>
                <input @bind="Password" type="password" placeholder="Passwort" required/> @*Passwort einbinden*@
            </td>
        </tr>
        <tr>
            @* <td id="buttons"> *@
            @*     <a href="/">LoginCS: <img src="css/Images/login.png" height="12" width="16" /></a> $1$LoginCS einbinden #1# *@
            @* </td> *@
            <td>

                <button @onclick="LogIn">Login</button>
                <button @onclick="LogOut">Logout</button>

                <br/>
                <button @onclick="FetchData">Abfrage</button>
                <p1>@testTextModel.Text</p1>
            </td>
        </tr>

        <tr>
            <td id="buttons">
                <a href="customer">Registrieren</a> @*weiterleiten auf Registireren Seite*@
            </td>
        </tr>
    </table>

</header>

@code{

    private const string NotLoggedInText = "Möchten Sie sich einloggen?";

    private string Benutzername { get; set; }

    private string Password { get; set; }

    private TestTextModel testTextModel = new TestTextModel();

    protected override async Task OnInitializedAsync()
    {
        testTextModel.Text = NotLoggedInText;
    }

    public async Task LogIn()
    {
        try
        {
            await Encrypt();
            string token = await Client.PostJsonAsync<string>("api/security", new CustomerCredentials { Benutzername = Benutzername, Passwort = Password });
            await LocalStorage.SetItemAsync("jwt", token);

            testTextModel.Text = "Hallo " + Benutzername;
        }
        catch (Exception)
        {
            testTextModel.Text = NotLoggedInText;
        }
    }

    public async Task LogOut()
    {
        if (await LocalStorage.ContainKeyAsync("jwt"))
        {
            await LocalStorage.RemoveItemAsync("jwt");
        }

        testTextModel.Text = "Sie wurden erfolgreich ausgeloggt!";
    }

    public async Task FetchData()
    {
        try
        {
           TestTextModel testTextModelFetch = await Client.GetJsonAsyncWithHead<TestTextModel>("api/test");
            testTextModel.Text = testTextModelFetch.Text;
        }
        catch (Exception)
        {
            testTextModel.Text = "Sie sind nicht eingeloggt!";
        }
    }

    private async Task Encrypt()
    {
        string password = Password;
        byte[] salt = new byte[128 / 8];

        //using (RandomNumberGenerator rng = RandomNumberGenerator.Create())
        //{
        //	rng.GetBytes(salt);
        //}
        // TODO salt in die bytes
        Password = Convert.ToBase64String(KeyDerivation.Pbkdf2(
                                                               password: password,
                                                               salt: salt,
                                                               prf: KeyDerivationPrf.HMACSHA1,
                                                               iterationCount: 10000,
                                                               numBytesRequested: 256 / 8));
    }







}