Aufsetzen eines Web-Projektes RazorPages (Frontend) 

Benennung des Projekts: " <Projektname>.Web.App "
1. "Blank Solution" anlegen 
2. Solution Folder "1. Code" und "2. Tests" anlegen 
3. Projekte vom Typ "Blazor App" im Solution Folder "1. Code" anlegen 
	(Achtung: Code-Projekte immer im Unterordner "Source" 
	der Dateistruktur der Solution anlegen.) 
3.1. Ordner "Data" löschen 
3.2. Alle Dateien im Ordner Pages löschen außer "_Host.cshtml" und "Index.razor" 
3.3. "NavMenu" im Ordner "Shared" löschen 
3.4. "MainLayout" anpassen, "NavMenu" und About-Knopf entfernen. 
3.5. "Startup.cs" anpassen: Using-Direktive zu Data entfernen, Registrierung von 
	"WeatherForcastService" löschen. 
3.6. "_Host.cshtml" anpassen: div mit ID "blazor-error-ui" löschen 
4. Wenn noch nicht geschehen: Web Compiler installieren					!!!!!!!!!!!!
5. "scss"-Datei "site.scss" in "wwwroot/css" erstellen. 
5.1. Rechtsklick auf "site.scss": WebCompiler / Compile File 
5.2. Rechtsklick auf erzeugte "compilerconﬁg.json" und WebCompiler		!!!!!!!!!!!!
	/ Enable compile on build 
5.3. NuGet-Paket-Installation bestätigen								!!!!!!!!!!!!


WebAPI erstellen (Backend)

Benennung des Projektname: " <Projektname>.Web.Api "
1. Neues Projekt im Solutionfolder "1. Code" vom Typ "ASP.Net Core Web Application" erzeugen
	(Achtung: Code-Projekte immer im Unterordner "Source" der Dateistruktur 
	der Solution anlegen.) 
2. Als Untertyp "Empty" auswählen 
3. In "Startup.cs" in "ConﬁgureServices" services.AddControllers() aufrufen, 
	damit der IIS die Controller erzeugt.								!!!!!!!!!!!!
4. In "Startup.cs" in "Conﬁgure" unter useEndpoints den Inhalt der Lamdafunktion 
	mit endpoints.MapControllers() ersetzen.							!!!!!!!!!!!!
5. Controller im Unterordner "Controllers" anlegen 


Backend mit Frontend verknüpfen 
1. Package-Manager Konsole öﬀnen 
2. Projekt "Web.App" in Package-Manager Konsole auswählen 
3. "Install-Package Microsoft.AspNetCore.Blazor.HttpClient -Version 3.2.0-preview3.20168.3"
	ausführen und NuGet-Paket installieren
4. HttpClientWrapper erstellen 
4.1. GetJsonAsync, PostJsonAsync, PutJsonAsync und DeleteAsync wrappen 
4.2. Backend-Url als const vermerken und per Methode mit Pfad kombinieren 
5. IHttpClient-Interface aus HttpClientWrapper erzeugen (Ctrl+Shift+R/Extract Interface) 
6. IHttpClient mit der Implementierung HttpClientWrapper in "Startup.cs" 
	als Service für DependencyInjection registrieren 
7. Models aus dem API-Verzeichnis "Models" per Verknüpfung in App-Verzeichnis "Models" 
	referenzieren.
